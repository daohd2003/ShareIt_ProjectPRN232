@page
@model ShareItFE.Pages.ProfileModel
@{
    ViewData["Title"] = "My Profile";
    var userEmail = User.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value;
}

@section Styles {
    <link rel="stylesheet" href="~/css/profile.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
}

<div class="page-container">
    @if (!string.IsNullOrEmpty(Model.SuccessMessage))
    {
        <div id="toast-success" class="toast-message bg-success text-white p-3 position-fixed top-0 end-0 m-3 rounded">
            @Model.SuccessMessage
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div id="toast-error" class="toast-message bg-danger text-white p-3 position-fixed top-0 end-0 m-3 rounded">
            @TempData["ErrorMessage"]
        </div>
    }

    @if (Model.Profile != null)
    {
        <div class="profile-grid">
            <aside class="sidebar">
                <div class="user-info">

                    <form method="post" enctype="multipart/form-data" asp-page-handler="UploadAvatar" id="avatar-form">
                        @Html.AntiForgeryToken()

                        <div class="user-avatar-container">
                            <img id="avatar-preview"
                                 src="@(string.IsNullOrEmpty(Model.Profile.ProfilePictureUrl) ? "/images/placeholder.jpg" : Model.Profile.ProfilePictureUrl)"
                                 alt="@Model.Profile.FullName"
                                 class="profile-avatar" />

                            <label for="avatar-input" class="avatar-upload-label" title="Upload new picture">
                                <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.86-1.291A2 2 0 0110.45 4h3.1a2 2 0 011.664.89l.86 1.291A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z" />
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 13a3 3 0 11-6 0 3 3 0 016 0z" />
                                </svg>
                            </label>

                            <input type="file" id="avatar-input" name="uploadedAvatar" class="hidden-input" accept="image/*" />
                        </div>

                    </form>
                    <h2 class="user-name">@Model.Profile.FullName</h2>
                    <p class="user-email">@userEmail</p>
                </div>

                <div id="avatar-modal" class="modal-overlay hidden">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 class="modal-title">Choose your image</h3>
                            <button id="modal-close-btn" class="modal-close-btn">&times;</button>
                        </div>

                        <div class="modal-body">
                            <div class="modal-image-preview-container">
                                <img id="modal-avatar-preview" src="#" alt="Avatar Preview" />
                            </div>
                        </div>

                        <div class="modal-actions">
                            <button id="modal-cancel-btn" class="btn btn-secondary">Cancel</button>
                            <button id="modal-save-btn" class="btn btn-primary">Save</button>
                        </div>
                    </div>
                </div>

                <nav id="profile-nav" class="profile-nav">
                    <a href="#" class="nav-link" data-tab="profile">
                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" /></svg>
                        <span>Profile</span>
                    </a>
                    <a href="#" class="nav-link" data-tab="orders">
                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4" /></svg>
                        <span>My Orders</span>
                    </a>
                    <a href="#" class="nav-link" data-tab="favorites">
                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" /></svg>
                        <span>Favorites</span>
                    </a>
                    <a href="#" class="nav-link" data-tab="settings">
                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.942 3.334.907 2.339 2.432a1.724 1.724 0 000 2.573c1.096 1.525-.794 3.334-2.339 2.432a1.724 1.724 0 00-2.573 1.066c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.942-3.334-.907-2.339-2.432a1.724 1.724 0 000-2.573c-1.096-1.525.794-3.334 2.339-2.432a1.724 1.724 0 002.573-1.066z" /><path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" /></svg>
                        <span>Settings</span>
                    </a>
                </nav>
            </aside>

            <main class="main-content">
                <div class="content-panel" data-tab-content="profile">
                    <div class="card">
                        <div class="content-header">
                            <h1 class="page-title">Profile Information</h1>
                            <button id="edit-profile-button" class="edit-button">
                                <svg fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" /></svg>
                                <span>Edit</span>
                            </button>
                        </div>

                        <div id="profile-display-view" class="profile-info-grid">
                            <div class="info-item">
                                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" /></svg>
                                <div class="info-item-content">
                                    <span class="info-label">Full Name</span>
                                    <span class="info-value">@Model.Profile.FullName</span>
                                </div>
                            </div>
                            <div class="info-item">
                                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" /></svg>
                                <div class="info-item-content">
                                    <span class="info-label">Email</span>
                                    <span class="info-value">@userEmail</span>
                                </div>
                            </div>
                            <div class="info-item">
                                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" /></svg>
                                <div class="info-item-content">
                                    <span class="info-label">Phone</span>
                                    <span class="info-value">@Model.Profile.Phone</span>
                                </div>
                            </div>
                            <div class="info-item">
                                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" /><path stroke-linecap="round" stroke-linejoin="round" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" /></svg>
                                <div class="info-item-content">
                                    <span class="info-label">Address</span>
                                    <span class="info-value">@Model.Profile.Address</span>
                                </div>
                            </div>
                        </div>

                        <form id="profile-edit-form" method="post" asp-page-handler="UpdateProfile" class="hidden">
                            @Html.AntiForgeryToken()
                            <input type="hidden" asp-for="Profile.Id" />
                            <input type="hidden" asp-for="Profile.UserId" />

                            <input type="hidden" asp-for="Profile.ProfilePictureUrl" />
                            <div class="form-grid">
                                <div class="form-group">
                                    <label asp-for="Profile.FullName" class="form-label"></label>
                                    <input asp-for="Profile.FullName" class="form-input" />
                                </div>
                                <div class="form-group">
                                    <label class="form-label">Email</label>
                                    <input value="@userEmail" readonly class="form-input" />
                                </div>
                                <div class="form-group">
                                    <label asp-for="Profile.Phone" class="form-label"></label>
                                    <input asp-for="Profile.Phone" class="form-input" />
                                </div>
                                <div class="form-group full-width">
                                    <label asp-for="Profile.Address" class="form-label"></label>
                                    <textarea asp-for="Profile.Address" rows="3" class="form-textarea"></textarea>
                                </div>
                            </div>
                            <div class="form-actions">
                                <button type="submit" class="btn btn-primary">Save Changes</button>
                                <button type="button" id="cancel-edit-button" class="btn btn-secondary">Cancel</button>
                            </div>
                        </form>
                    </div>
                </div>

                <div class="content-panel" data-tab-content="orders">
                    <div class="card">
                        <h1 class="page-title">My Orders</h1>

                        @if (Model.TotalPages >= 1)
                        {
                            var pagedOrders = Model.Orders
                                .Skip((Model.CurrentPage - 1) * Model.PageSize)
                                .Take(Model.PageSize)
                                .ToList();
                            <div class="order-list">
                                @foreach (var order in pagedOrders)
                                {
                                    var statusClass = order.Status.ToString().ToLower() switch
                                    {
                                        "pending" => "status-pending",
                                        "approved" => "status-approved",
                                        "in_transit" => "status-in-transit",
                                        "in_use" => "status-in-use",
                                        "returned" => "status-returned",
                                        "cancelled" => "status-cancelled",
                                        "returned_with_issue" => "status-issue",
                                        _ => "status-pending"
                                    };

                                    <div class="order-card">
                                        <div class="order-header">
                                            <div class="order-header-info">
                                                <h3 class="order-id">Order #@order.OrderCode</h3>
                                                <p class="order-date">Placed on: @order.CreatedAt.ToLocalTime().ToString("dd/M/yyyy")</p>
                                            </div>
                                            <span class="status-badge @statusClass">@order.Status.ToString().Replace("_", " ")</span>
                                        </div>

                                        @if (order.Items != null && order.Items.Any())
                                        {
                                            var firstItem = order.Items.First();
                                            var totalItems = order.Items.Count();
                                            var remainingCount = totalItems - 1;

                                            <div class="order-body">
                                                <div class="order-item-multi">
                                                    <div class="order-item-images">
                                                        @foreach (var item in order.Items.Take(2))
                                                        {
                                                            <img src="@(item.PrimaryImageUrl ?? "/images/placeholder.jpg")" alt="@item.ProductName" class="order-item-image-stacked" />
                                                        }
                                                        @if (totalItems > 2)
                                                        {
                                                            <div class="order-item-more">
                                                                <span>+@(totalItems - 2)</span>
                                                            </div>
                                                        }
                                                    </div>
                                                    <div class="order-item-summary">
                                                        <p class="item-count">@totalItems item@(totalItems > 1 ? "s" : "")</p>
                                                        <h4 class="item-name">
                                                            @firstItem.ProductName
                                                            @if (remainingCount > 0)
                                                            {
                                                                <span> and @remainingCount more</span>
                                                            }
                                                        </h4>
                                                    </div>
                                                </div>
                                            </div>
                                        }

                                        <div class="order-footer">
                                            <span class="order-total">
                                                Total: @(order.TotalAmount > 0 ? order.TotalAmount.ToString("C0") : "N/A")
                                            </span>
                                            <div class="order-actions">
                                                <a asp-page="/Order/Details" asp-route-id="@order.Id" class="btn btn-secondary">View Details</a>
                                                @if (order.Status.ToString().ToLower() == "returned")
                                                {
                                                    <button type="button" class="btn btn-primary rent-again-btn" data-order-id="@order.Id">Rent Again</button>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="empty-state">
                                <p>You have no orders yet.</p>
                            </div>
                        }
                    </div>
                    <div class="pagination-controls">
                        @{
                            var prevDisabled = Model.CurrentPage <= 1 ? "disabled" : "";
                            var nextDisabled = Model.CurrentPage >= Model.TotalPages ? "disabled" : "";
                        }

                        <a asp-page="/Profile"
                           asp-route-pageNum="@(Model.CurrentPage - 1)"
                           asp-route-tab="orders"
                           class="btn btn-secondary @prevDisabled">
                            &laquo; Previous
                        </a>

                        <div class="page-numbers">
                            @for (int i = 1; i <= Model.TotalPages; i++)
                            {
                                <a asp-page="/Profile"
                                   asp-route-pageNum="@i"
                                   asp-route-tab="orders"
                                   class="btn @(i == Model.CurrentPage ? "btn-primary" : "btn-secondary")">@i</a>
                            }
                        </div>

                        <a asp-page="/Profile"
                           asp-route-pageNum="@(Model.CurrentPage + 1)"
                           asp-route-tab="orders"
                           class="btn btn-secondary @nextDisabled">
                            Next &raquo;
                        </a>
                    </div>
                </div>

                <div class="content-panel" data-tab-content="favorites">
                    <div class="card">
                        <h1 class="page-title">My Favorites</h1>

                        @if (Model.Favorites.Any())
                        {
                            var pagedFavorites = Model.Favorites
                                .Skip((Model.FavoritesPageNum - 1) * Model.FavoritesPageSize)
                                .Take(Model.FavoritesPageSize)
                                .ToList();

                            <div class="favorites-grid">
                                @foreach (var item in pagedFavorites)
                                {
                                    var product = item.Product;

                                    <div class="favorite-card">
                                        <img src="@(product?.Images?.FirstOrDefault(i => i.IsPrimary)?.ImageUrl ?? "/images/placeholder.jpg")"
                                             alt="@product?.Name"
                                             class="favorite-image" />

                                        <h4 class="favorite-name">@product?.Name</h4>

                                        <p class="favorite-price text-purple-600 font-semibold">
                                            @((product?.PricePerDay ?? 0).ToString("C0"))/day
                                        </p>

                                        <div class="favorite-actions">
                                            <a href="/products/details/@product?.Id" class="btn btn-primary">Rent Now</a>

                                            <form method="post"
                                                  asp-page-handler="RemoveFavorite"
                                                  asp-route-productId="@product?.Id"
                                                  asp-route-tab="favorites"
                                                  asp-route-pageNum="@Model.CurrentPage"
                                                  asp-route-favPage="@Model.FavoritesPageNum"
                                                  onsubmit="return confirm('Remove from favorites?')"
                                                  style="display:inline;">
                                                <button type="submit" class="btn btn-outline-danger" title="Remove">&#10005;</button>
                                            </form>
                                        </div>
                                    </div>
                                }
                            </div>

                            <div class="pagination-controls mt-4">
                                @{
                                    var prevFavDisabled = Model.FavoritesPageNum <= 1 ? "disabled" : "";
                                    var nextFavDisabled = Model.FavoritesPageNum >= Model.FavoritesTotalPages ? "disabled" : "";
                                }

                                <a asp-page="/Profile"
                                   asp-route-pageNum="@Model.CurrentPage"
                                   asp-route-favPage="@(Model.FavoritesPageNum - 1)"
                                   asp-route-tab="favorites"
                                   class="btn btn-secondary @prevFavDisabled">
                                    &laquo; Previous
                                </a>

                                <div class="page-numbers">
                                    @for (int i = 1; i <= Model.FavoritesTotalPages; i++)
                                    {
                                        <a asp-page="/Profile"
                                           asp-route-pageNum="@Model.CurrentPage"
                                           asp-route-favPage="@i"
                                           asp-route-tab="favorites"
                                           class="btn @(i == Model.FavoritesPageNum ? "btn-primary" : "btn-secondary")">@i</a>
                                    }
                                </div>

                                <a asp-page="/Profile"
                                   asp-route-pageNum="@Model.CurrentPage"
                                   asp-route-favPage="@(Model.FavoritesPageNum + 1)"
                                   asp-route-tab="favorites"
                                   class="btn btn-secondary @nextFavDisabled">
                                    Next &raquo;
                                </a>
                            </div>
                        }
                        else
                        {
                            <div class="empty-state">
                                <p>You don’t have any favorite items yet.</p>
                            </div>
                        }
                    </div>
                </div>

                <div class="content-panel" data-tab-content="settings">
                    <div class="card">
                        <h1 class="page-title">Settings</h1>

                        <div class="settings-list">

                            <!-- Security Section -->
                            <div class="settings-section">
                                <h3 class="section-title">Security & Login</h3>

                                <!-- Change Password (Container) -->
                                <div class="setting-item-wrapper">
                                    <div class="setting-item">
                                        <div class="setting-icon">
                                            <!-- Icon ổ khóa -->
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round"
                                                      d="M16.5 10.5V6.75a4.5 4.5 0 10-9 0v3.75m-.75 11.25h10.5a2.25 2.25 0 002.25-2.25v-6.75a2.25 2.25 0 00-2.25-2.25H6.75a2.25 2.25 0 00-2.25 2.25v6.75a2.25 2.25 0 002.25 2.25z" />
                                            </svg>
                                        </div>
                                        <div class="setting-text">
                                            <h4>Change Password</h4>
                                            <p>It's a good idea to use a strong password that you're not using elsewhere.</p>
                                        </div>
                                        <div class="setting-action">
                                            <button type="button" id="change-password-toggle-btn" class="btn btn-secondary">Change</button>
                                        </div>
                                    </div>

                                    <!-- Form đổi mật khẩu - ẩn ban đầu -->
                                    <div id="change-password-form" class="mt-3 @(ViewData.ModelState.IsValid ? "d-none" : "")">
                                        <form method="post" asp-page-handler="ChangePassword">
                                            @Html.AntiForgeryToken()

                                            <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

                                            <!-- Current Password -->
                                            <div class="form-group mb-3">
                                                <label asp-for="ChangePassword.CurrentPassword">Current Password</label>
                                                <div class="position-relative">
                                                    <input asp-for="ChangePassword.CurrentPassword"
                                                           type="password"
                                                           class="form-control pe-5"
                                                           autocomplete="current-password" />
                                                    <i class="bi bi-eye-slash toggle-password position-absolute end-0 top-50 translate-middle-y me-3"
                                                       style="cursor: pointer;"></i>
                                                </div>
                                                <span asp-validation-for="ChangePassword.CurrentPassword" class="text-danger"></span>
                                            </div>

                                            <!-- New Password -->
                                            <div class="form-group mb-3">
                                                <label asp-for="ChangePassword.NewPassword">New Password</label>
                                                <div class="position-relative">
                                                    <input asp-for="ChangePassword.NewPassword"
                                                           type="password"
                                                           class="form-control pe-5"
                                                           autocomplete="new-password" />
                                                    <i class="bi bi-eye-slash toggle-password position-absolute end-0 top-50 translate-middle-y me-3"
                                                       style="cursor: pointer;"></i>
                                                </div>
                                                <span asp-validation-for="ChangePassword.NewPassword" class="text-danger"></span>
                                            </div>

                                            <!-- Confirm Password -->
                                            <div class="form-group mb-3">
                                                <label asp-for="ChangePassword.ConfirmPassword">Confirm New Password</label>
                                                <div class="position-relative">
                                                    <input asp-for="ChangePassword.ConfirmPassword"
                                                           type="password"
                                                           class="form-control pe-5"
                                                           autocomplete="new-password" />
                                                    <i class="bi bi-eye-slash toggle-password position-absolute end-0 top-50 translate-middle-y me-3"
                                                       style="cursor: pointer;"></i>
                                                </div>
                                                <span asp-validation-for="ChangePassword.ConfirmPassword" class="text-danger"></span>
                                            </div>

                                            <button type="submit" class="btn btn-primary">Update Password</button>
                                        </form>
                                    </div>
                                </div>

                                <!-- Two-Factor Authentication -->
                                <div class="setting-item">
                                    <div class="setting-icon">
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M9 12.75L11.25 15 15 9.75m-3-7.036A11.959 11.959 0 013.598 6 11.99 11.99 0 003 9.749c0 5.592 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.31-.21-2.57-.598-3.751h-.152c-3.196 0-6.1-1.248-8.25-3.286zm0 13.036h.008v.008h-.008v-.008z" /></svg>
                                    </div>
                                    <div class="setting-text">
                                        <h4>Two-Factor Authentication (2FA)</h4>
                                        <p>Add an extra layer of security to your account.</p>
                                    </div>
                                    <div class="setting-action">
                                        <a href="#" class="btn btn-secondary">Manage</a>
                                    </div>
                                </div>
                            </div>

                            <!-- Payments Section -->
                            <div class="settings-section">

                                <h3 class="section-title">Payments</h3>



                                <!-- Billing & Payment Methods -->

                                <div class="setting-item">

                                    <div class="setting-icon">

                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M2.25 8.25h19.5M2.25 9h19.5m-16.5 5.25h6m-6 2.25h3m-3.75 3h15a2.25 2.25 0 002.25-2.25V6.75A2.25 2.25 0 0019.5 4.5h-15a2.25 2.25 0 00-2.25 2.25v10.5A2.25 2.25 0 004.5 21z" /></svg>

                                    </div>

                                    <div class="setting-text">

                                        <h4>Billing & Payment Methods</h4>

                                        <p>Manage your payment methods and view your billing history.</p>

                                    </div>

                                    <div class="setting-action">

                                        <a href="#" class="btn btn-secondary">Manage</a>

                                    </div>

                                </div>

                            </div>



                            <!-- Account Management Section -->

                            <div class="settings-section danger-zone">

                                <h3 class="section-title">Account Management</h3>



                                <!-- Delete Account -->

                                <div class="setting-item">

                                    <div class="setting-icon text-danger">

                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0" /></svg>

                                    </div>

                                    <div class="setting-text">

                                        <h4>Delete Account</h4>

                                        <p>Permanently delete your account and all of your content. This action is irreversible.</p>

                                    </div>

                                    <div class="setting-action">

                                        <button type="button" class="btn btn-danger">Delete</button>

                                    </div>

                                </div>

                            </div>

                        </div>
                    </div>
                </div>
            </main>
        </div>
    }
    else
    {
        <p>Could not load profile information.</p>
    }
</div>

<div id="rent-again-modal" class="modal-overlay hidden">
    <div class="modal-content">
        <div class="modal-header">
            <h3 class="modal-title">Rent Item(s) Again</h3>
            <button id="rent-again-close-btn" class="modal-close-btn">&times;</button>
        </div>
        <div class="modal-body">
            <form id="rent-again-form">
                @Html.AntiForgeryToken() @* THÊM: Anti-forgery token cho form AJAX *@
                <input type="hidden" id="rent-again-original-order-id" name="OriginalOrderId" />

                <div class="form-group mb-3">
                    <label for="new-rental-start-date" class="form-label">Rental Start Date</label>
                    <input type="date" id="new-rental-start-date" class="form-input" required />
                </div>
                <div class="form-group mb-3">
                    <label for="new-rental-end-date" class="form-label">Rental End Date</label>
                    <input type="date" id="new-rental-end-date" class="form-input" required />
                </div>
            </form>
        </div>
        <div class="modal-actions">
            <button id="rent-again-cancel-btn" class="btn btn-secondary">Cancel</button>
            <button id="rent-again-save-btn" class="btn btn-primary">Confirm Rent</button>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const backendBaseUrl = "@Model.ApiBaseUrl";
        const accessToken = "@Model.AccessToken";
        document.addEventListener('DOMContentLoaded', () => {
            // Ẩn toast sau 4 giây
            const toastSuccess = document.getElementById('toast-success');
            const toastError = document.getElementById('toast-error');

            if (toastSuccess) {
                setTimeout(() => { toastSuccess.style.display = 'none'; }, 4000);
            }
            if (toastError) {
                setTimeout(() => { toastError.style.display = 'none'; }, 4000);
            }

            // Toggle hiển thị/ẩn mật khẩu
            document.querySelectorAll('.toggle-password').forEach(icon => {
                icon.addEventListener('click', () => {
                    // Tìm input nằm trong cùng .position-relative (hoặc div cha)
                    const wrapper = icon.closest('.position-relative');
                    const input = wrapper ? wrapper.querySelector('input') : null;
                    if (!input) return;

                    const isPassword = input.type === 'password';
                    input.type = isPassword ? 'text' : 'password';

                    icon.classList.toggle('bi-eye');
                    icon.classList.toggle('bi-eye-slash');
                });
            });

            // Toggle hiển thị form đổi mật khẩu
            const toggleBtn = document.getElementById('change-password-toggle-btn');
            const passwordForm = document.getElementById('change-password-form');

            if (toggleBtn && passwordForm) {
                toggleBtn.addEventListener('click', () => {
                    passwordForm.classList.toggle('d-none');
                    toggleBtn.textContent = passwordForm.classList.contains('d-none') ? 'Change' : 'Cancel';
                });
            }

            // Logic cho chức năng "Rent Again"
            const rentAgainModal = document.getElementById('rent-again-modal');
            const rentAgainCloseBtn = document.getElementById('rent-again-close-btn');
            const rentAgainCancelBtn = document.getElementById('rent-again-cancel-btn');
            const rentAgainSaveBtn = document.getElementById('rent-again-save-btn');
            const originalOrderIdInput = document.getElementById('rent-again-original-order-id');
            const newRentalStartDateInput = document.getElementById('new-rental-start-date');
            const newRentalEndDateInput = document.getElementById('new-rental-end-date');

            // Bắt sự kiện click vào nút "Rent Again" trên mỗi thẻ đơn hàng
            document.querySelectorAll('.rent-again-btn').forEach(button => {
                button.addEventListener('click', () => {
                    const orderId = button.dataset.orderId;
                    originalOrderIdInput.value = orderId;

                    const today = new Date();
                    const tomorrow = new Date(today);
                    tomorrow.setDate(tomorrow.getDate() + 1);

                    newRentalStartDateInput.min = tomorrow.toISOString().split('T')[0];
                    newRentalStartDateInput.value = tomorrow.toISOString().split('T')[0];

                    const defaultEndDate = new Date(tomorrow);
                    defaultEndDate.setDate(tomorrow.getDate() + 7);
                    newRentalEndDateInput.min = defaultEndDate.toISOString().split('T')[0];
                    newRentalEndDateInput.value = defaultEndDate.toISOString().split('T')[0];

                    rentAgainModal.classList.remove('hidden');
                });
            });

            newRentalStartDateInput.addEventListener('change', () => {
                const startDate = new Date(newRentalStartDateInput.value);
                const minEndDate = new Date(startDate);
                minEndDate.setDate(startDate.getDate() + 1);

                newRentalEndDateInput.min = minEndDate.toISOString().split('T')[0];
                if (new Date(newRentalEndDateInput.value) < minEndDate) {
                    newRentalEndDateInput.value = minEndDate.toISOString().split('T')[0];
                }
            });

            const closeModal = () => {
                rentAgainModal.classList.add('hidden');
            };

            if (rentAgainCloseBtn) {
                rentAgainCloseBtn.addEventListener('click', closeModal);
            }
            if (rentAgainCancelBtn) {
                rentAgainCancelBtn.addEventListener('click', closeModal);
            }

            if (rentAgainSaveBtn) {
                rentAgainSaveBtn.addEventListener('click', async () => {
                    const originalOrderId = originalOrderIdInput.value;
                    const newRentalStartDate = newRentalStartDateInput.value;
                    const newRentalEndDate = newRentalEndDateInput.value;

                    if (!originalOrderId || !newRentalStartDate || !newRentalEndDate) {
                        alert('Vui lòng cung cấp đầy đủ thông tin ngày thuê.');
                        return;
                    }

                    try {
                        const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

                        const headers = {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': antiForgeryToken
                        };

                        if (accessToken) {
                            headers['Authorization'] = `Bearer ${accessToken}`;
                        }

                        const response = await fetch(`${backendBaseUrl}/orders/rent-again`, {
                            method: 'POST',
                            headers: headers,
                            credentials: 'include',
                            body: JSON.stringify({
                                OriginalOrderId: originalOrderId,
                                NewRentalStartDate: newRentalStartDate,
                                NewRentalEndDate: newRentalEndDate
                            })
                        });

                        const apiResponse = await response.json();

                        if (response.ok) {
                            const newOrderId = apiResponse.data;
                            if (newOrderId) {
                                alert(apiResponse.message || "Đơn hàng mới đã được tạo thành công! Đang chuyển hướng đến trang thanh toán.");
                                window.location.href = `/CheckoutPage/Checkout?orderId=${newOrderId}`;
                            } else {
                                alert("Không thể lấy ID đơn hàng mới từ phản hồi API. Vui lòng thử lại.");
                            }
                        } else {
                            alert(apiResponse.message || "Không thể thuê lại. Đã xảy ra lỗi.");
                            window.location.reload();
                        }
                    } catch (error) {
                        console.error('Lỗi khi thực hiện thuê lại:', error);
                        alert('Đã xảy ra lỗi không mong muốn. Vui lòng thử lại.');
                    }
                    closeModal();
                });
            }
        });
    </script>

    <script src="~/js/profile.js" asp-append-version="true"></script>
}