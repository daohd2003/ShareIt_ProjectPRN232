@page
@model ShareItFE.Pages.CheckoutPage.CheckoutModel
@{
    ViewData["Title"] = "Checkout";
}

@section Styles {
    <link rel="stylesheet" href="~/css/cart.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <link rel="stylesheet" href="~/css/checkout-modal.css" asp-append-version="true" />
}

@if (!string.IsNullOrEmpty(Model.QrCodeUrl))
{
    <div id="qr-modal-container">
        <div class="modal-overlay" id="modal-overlay-close"></div>
        <div class="modal-content">
            <button class="modal-close-btn" id="modal-icon-close">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>

            <h2 class="text-2xl font-bold text-gray-900 mb-2">Scan QR code to pay</h2>
            <div class="marquee-container mb-6">
                <div class="marquee-content">
                    SEPay only supports payments via: Vietcombank, VPBank, VIB, VietinBank, MBBank, ACB, Sacombank, TPBank, Eximbank, HDBank, BIDV, Techcombank, MSB, Shinhan Bank, Agribank, Public Bank (PublicBank Vietnam) and other banks such as OCB, KienlongBank, ABBANK, LPBank, Bac A Bank, SeaBank, SHB, NCB, Woori Bank, VietABank, Vietbank, Nam A Bank, PGBank
                </div>
            </div>

            <div class="p-2 border border-gray-200 rounded-lg inline-block mb-4">
                <img src="@Model.QrCodeUrl" alt="Payment QR code" class="mx-auto w-32 h-64" />
            </div>

            <p class="text-xl font-bold">Total amount: <span class="text-purple-600">@Model.Total.ToString("N0") VND</span></p>
            <p class="text-sm text-gray-500 mt-4 max-w-sm mx-auto">After successful payment, the order status will be updated. You don't need to perform any additional actions.</p>

            <a href="/OrderHistory" class="mt-6 inline-block w-full bg-purple-600 text-white px-8 py-3 rounded-lg font-semibold hover:bg-purple-700 transition-colors">
                Check order history
            </a>
        </div>
    </div>
}

<div class="min-h-screen bg-gray-50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        @* Toast Messages *@
        @if (!string.IsNullOrEmpty(Model.SuccessMessage))
        {
            <div id="toast-success" class="toast-message bg-success text-white p-3 position-fixed top-0 end-0 m-3 rounded">
                @Model.SuccessMessage
            </div>
        }

        @if (!string.IsNullOrEmpty(Model.ErrorMessage))
        {
            <div id="toast-error" class="toast-message bg-danger text-white p-3 position-fixed top-0 end-0 m-3 rounded">
                @Model.ErrorMessage
            </div>
        }

        @* Header *@
        <div class="flex items-center space-x-4 mb-8">
            <a asp-page="/CartPage/Cart" class="flex items-center space-x-2 text-gray-600 hover:text-purple-600 transition-colors">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-5 w-5"><path d="M19 12H5" /><path d="M12 19l-7-7 7-7" /></svg>
                <span>Back to cart</span>
            </a>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            @* Checkout Form *@
            <div class="lg:col-span-2 space-y-6">
                <form method="post" asp-page-handler="Checkout" class="space-y-6">
                    @Html.AntiForgeryToken()

                    @if (Model.OrderId.HasValue && Model.OrderId.Value != Guid.Empty)
                    {
                        <input type="hidden" asp-for="OrderId" />
                    }

                    @* Contact & Delivery Information (Combined) *@
                    <div class="bg-white rounded-lg shadow-sm p-6">
                        <h2 class="text-xl font-bold text-gray-900 mb-6 flex items-center">
                            <i class="bi bi-person h-5 w-5 mr-2"></i>
                            Contact & Delivery Information
                        </h2>

                        <div class="mb-4 flex items-center">
                            <input type="checkbox" id="useSameProfile" name="Input.UseSameProfile" value="true"
                                   checked="@(Model.Input.UseSameProfile)" onchange="toggleInputMethod(this.checked);"
                                   class="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded">
                            <label for="useSameProfile" class="ml-2 text-sm text-gray-700">Use information from my profile</label>
                        </div>

                        <div id="manualInputFields" style="display: @(Model.Input.UseSameProfile ? "none" : "block");">
                            <div class="grid grid-cols-1 gap-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Full name</label>
                                    <input type="text" name="Input.CustomerFullName" value="@Model.Input.CustomerFullName"
                                           class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent" @(Model.Input.UseSameProfile ? "disabled" : "") />
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Email</label>
                                    <input type="email" name="Input.Email" value="@Model.Input.Email"
                                           class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent" @(Model.Input.UseSameProfile ? "disabled" : "") />
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Phone number</label>
                                    <input type="tel" name="Input.PhoneNumber" value="@Model.Input.PhoneNumber"
                                           class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent" @(Model.Input.UseSameProfile ? "disabled" : "") />
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Address</label>
                                    <input type="text" name="Input.Address" value="@Model.Input.Address"
                                           class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent" @(Model.Input.UseSameProfile ? "disabled" : "") />
                                </div>
                            </div>
                        </div>
                    </div>

                    @* Payment Method *@
                    <div class="bg-white rounded-lg shadow-sm p-6">
                        <h2 class="text-xl font-bold text-gray-900 mb-6 flex items-center">
                            <i class="bi bi-credit-card h-5 w-5 mr-2"></i>
                            Payment Method
                        </h2>
                        <div class="space-y-4">
                            <div class="flex space-x-4">
                                <label class="flex items-center p-3 border rounded-lg has-[:checked]:bg-purple-50 has-[:checked]:border-purple-500 transition-all cursor-pointer">
                                    <input type="radio" name="Input.PaymentMethod" value="qr"
                                           checked="@(Model.Input.PaymentMethod == "qr" || string.IsNullOrEmpty(Model.Input.PaymentMethod))"
                                           class="h-4 w-4 text-purple-600 focus:ring-purple-500" />
                                    <span class="ml-3">QR Code (Bank Transfer)</span>
                                </label>
                                <label class="flex items-center p-3 border rounded-lg has-[:checked]:bg-purple-50 has-[:checked]:border-purple-500 transition-all cursor-pointer">
                                    <input type="radio" name="Input.PaymentMethod" value="vnpay"
                                           checked="@(Model.Input.PaymentMethod == "vnpay")"
                                           class="h-4 w-4 text-purple-600 focus:ring-purple-500" />
                                    <span class="ml-3">VNPay</span>
                                </label>
                            </div>
                        </div>
                    </div>

                    <div class="mb-6">
                        <input type="checkbox" id="hasAgreedToPolicies" name="Input.HasAgreedToPolicies" value="true"
                               class="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded">
                        <label for="hasAgreedToPolicies" class="ml-2 text-sm text-gray-700">
                            I have read and agree to the <a href="/rental-and-sales-policy" target="_blank" class="text-purple-600 hover:underline">Rental and Sales Policy</a>.
                        </label>
                        <span asp-validation-for="Input.HasAgreedToPolicies" class="text-danger text-sm mt-1 block"></span>
                    </div>

                    <button type="submit"
                            id="checkoutButton"
                            class="w-full bg-purple-600 text-white py-4 px-6 rounded-lg font-semibold hover:bg-purple-700 transition-colors flex items-center justify-center space-x-2">
                        <i class="bi bi-lock-fill h-5 w-5"></i>
                        <span>Complete order - @Model.Total.ToString("N0") VND</span>
                    </button>
                </form>
            </div>

            @* Order Summary *@
            <div class="lg:col-span-1">
                <div class="bg-white rounded-lg shadow-sm p-6 sticky top-8">
                    <h2 class="text-xl font-bold text-gray-900 mb-6">Order Summary</h2>

                    <div class="space-y-8 mb-6">
                        @if (Model.Cart != null && Model.Cart.Items.Any())
                        {
                            @foreach (var item in Model.Cart.Items)
                            {
                                <div class="space-y-2">
                                    <!-- Large product image -->
                                    <img src="@(item.PrimaryImageUrl ?? "/images/placeholder.jpg")"
                                         alt="@item.ProductName"
                                         class="w-full h-auto rounded-lg object-cover" />

                                    <!-- Product information -->
                                    <div class="text-sm text-gray-800 leading-5">
                                        <p class="font-semibold">@item.ProductName</p>
                                        <p>Size: <span class="font-medium">@item.ProductSize</span></p>
                                        <p>@item.RentalDays days</p>
                                        <p class="text-purple-600 font-bold text-base mt-1">@((item.PricePerUnit * item.RentalDays * item.Quantity).ToString("N0")) VND</p>
                                    </div>
                                </div>
                            }
                        }
                    </div>

                    <!-- Price summary -->
                    <div class="space-y-3 mb-6 border-t pt-4">
                        <div class="flex justify-between text-sm"><span class="text-gray-600">Subtotal</span><span class="font-semibold">@Model.Subtotal.ToString("N0") VND</span></div>
                        <div class="flex justify-between text-sm"><span class="text-gray-600">Shipping fee</span><span class="font-semibold">@(Model.DeliveryFee == 0 ? "FREE" : Model.DeliveryFee.ToString("N0") + " VND")</span></div>
                        <div class="border-t pt-3">
                            <div class="flex justify-between text-lg font-bold"><span>Total</span><span class="text-purple-600">@Model.Total.ToString("N0") VND</span></div>
                        </div>
                    </div>

                    <!-- Commitments -->
                    <div class="space-y-3 text-sm text-gray-600">
                        <div class="flex items-center space-x-2"><i class="bi bi-check-circle-fill text-green-500"></i><span>SSL encrypted payment</span></div>
                        <div class="flex items-center space-x-2"><i class="bi bi-check-circle-fill text-green-500"></i><span>Money back guarantee</span></div>
                        <div class="flex items-center space-x-2"><i class="bi bi-check-circle-fill text-green-500"></i><span>24/7 customer support</span></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // --- 1. Logic cho Toast Messages ---
            const toastSuccess = document.getElementById('toast-success');
            if (toastSuccess) {
                setTimeout(() => { toastSuccess.style.display = 'none'; }, 4000);
            }

            const toastError = document.getElementById('toast-error');
            if (toastError) {
                setTimeout(() => { toastError.style.display = 'none'; }, 4000);
            }

            // --- 2. Logic cho Checkbox "Sử dụng thông tin hồ sơ của tôi" ---
            const useSameProfileCheckbox = document.getElementById('useSameProfile');
            const manualInputFields = document.getElementById('manualInputFields');

            // Hàm này sẽ điều khiển việc hiển thị/vô hiệu hóa các trường nhập liệu thủ công
            function toggleInputMethod(isChecked) {
                const inputs = manualInputFields.querySelectorAll('input, select');

                if (isChecked) {
                    manualInputFields.style.display = 'none';
                    inputs.forEach(input => {
                        input.setAttribute('disabled', 'disabled');
                    });
                } else {
                    manualInputFields.style.display = 'block';
                    inputs.forEach(input => {
                        input.removeAttribute('disabled');
                    });
                }
            }

            if (useSameProfileCheckbox) {
                useSameProfileCheckbox.addEventListener('change', () => toggleInputMethod(useSameProfileCheckbox.checked));
                // Khởi tạo trạng thái ban đầu khi trang tải dựa trên giá trị Razor Model
                toggleInputMethod(useSameProfileCheckbox.checked);
            }

            // --- 3. Logic cho Modal QR Code ---
            const qrModalContainer = document.getElementById('qr-modal-container');
            const transactionId = "@TempData["TransactionId"]"; // Lấy transactionId từ TempData Razor Pages

            if (qrModalContainer) { // Chỉ chạy logic modal nếu modal HTML tồn tại trên trang
                const closeBtnIcon = document.getElementById('modal-icon-close');
                const closeBtnOverlay = document.getElementById('modal-overlay-close');

                const openQrModal = () => qrModalContainer.classList.add('open');
                const closeQrModal = () => qrModalContainer.classList.remove('open');

                closeBtnIcon.addEventListener('click', closeQrModal);
                closeBtnOverlay.addEventListener('click', closeQrModal);

                // Tự động mở modal khi trang tải xong (nếu có QrCodeUrl)
                setTimeout(openQrModal, 100);

                // Nếu có transactionId, bắt đầu kiểm tra trạng thái thanh toán định kỳ
                if (transactionId) {
                    let checkStatusInterval = setInterval(async () => { // Changed to 'let' to allow reassigning
                        try {
                            const response = await fetch(`https://localhost:7256/api/transactions/${transactionId}/status`, {
                                credentials: "include" // Giữ nguyên nếu cần gửi cookie/token
                            });

                            if (!response.ok) {
                                console.error(`Error checking transaction status: ${response.status} - ${response.statusText}`);
                                clearInterval(checkStatusInterval);
                                alert('An error occurred while checking transaction status.');
                                return;
                            }

                            const apiResponse = await response.json();
                            const status = apiResponse.data?.status; // Đảm bảo truy cập an toàn

                            if (status === "completed") {
                                clearInterval(checkStatusInterval);
                                alert("Payment successful!");
                                // Chuyển hướng đến trang lịch sử đơn hàng sau khi thanh toán thành công
                                window.location.href = "@(Url.Content(Model.frontendBaseUrl))" + "/Profile?tab=orders&page=1";
                            } else {
                                console.log(`Transaction ${transactionId} status: ${status}. Checking again...`);
                            }
                        } catch (error) {
                            console.error('Failed to fetch transaction status:', error);
                            clearInterval(checkStatusInterval);
                            alert('An error occurred while checking transaction status.');
                        }
                    }, 3000); // Kiểm tra mỗi 3 giây

                    // Dừng interval khi người dùng đóng modal thủ công
                    closeBtnIcon.addEventListener('click', () => { clearInterval(checkStatusInterval); console.log('Payment status check stopped due to modal close.'); });
                    closeBtnOverlay.addEventListener('click', () => { clearInterval(checkStatusInterval); console.log('Payment status check stopped due to modal overlay click.'); });
                }
            }

            // --- 4. Logic cho Checkbox "Đồng ý chính sách" và nút Thanh toán ---
            const hasAgreedCheckbox = document.getElementById('hasAgreedToPolicies');
            const checkoutButton = document.getElementById('checkoutButton');

            // Hàm này sẽ cập nhật trạng thái của nút thanh toán
            function updateCheckoutButtonState() {
                if (hasAgreedCheckbox.checked) {
                    checkoutButton.disabled = false;
                    checkoutButton.classList.remove('bg-purple-400', 'cursor-not-allowed');
                    checkoutButton.classList.add('bg-purple-600', 'hover:bg-purple-700');
                } else {
                    checkoutButton.disabled = true;
                    checkoutButton.classList.remove('bg-purple-600', 'hover:bg-purple-700');
                    checkoutButton.classList.add('bg-purple-400', 'cursor-not-allowed');
                }
            }

            if (hasAgreedCheckbox && checkoutButton) {
                hasAgreedCheckbox.addEventListener('change', updateCheckoutButtonState);
                // Khởi tạo trạng thái ban đầu của nút khi trang tải
                updateCheckoutButtonState();
            }
        });
    </script>
}