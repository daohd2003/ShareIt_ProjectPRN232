@page "/products"
@using Microsoft.AspNetCore.Mvc.Rendering
@model ShareItFE.Pages.Products.ProductsModel
@{
    ViewData["Title"] = "Browse Collection";

    var categories = new List<SelectListItem>
    {
        new SelectListItem { Value = "", Text = "All Categories" },
        new SelectListItem { Value = "Electronics", Text = "Electronics" },
        new SelectListItem { Value = "Tools", Text = "Tools" },
        new SelectListItem { Value = "Outdoors", Text = "Outdoors" },
        new SelectListItem { Value = "Camera", Text = "Camera" },
        new SelectListItem { Value = "Evening Wear", Text = "Evening Wear" },
        new SelectListItem { Value = "Formal Wear", Text = "Formal Wear" },
        new SelectListItem { Value = "Cocktail", Text = "Cocktail" },
        new SelectListItem { Value = "Wedding", Text = "Wedding" },
    };

    var priceRanges = new List<SelectListItem>
    {
        new SelectListItem { Value = "", Text = "All Prices" },
        new SelectListItem { Value = "0-20", Text = "$0 - $20" },
        new SelectListItem { Value = "20-40", Text = "$20 - $40" },
        new SelectListItem { Value = "40", Text = "$40+" },
    };

    var sizes = new List<SelectListItem>
    {
        new SelectListItem { Value = "", Text = "All Sizes" },
        new SelectListItem { Value = "XS", Text = "XS" },
        new SelectListItem { Value = "S", Text = "S" },
        new SelectListItem { Value = "M", Text = "M" },
        new SelectListItem { Value = "L", Text = "L" },
        new SelectListItem { Value = "XL", Text = "XL" },
    };

    var ratings = new List<SelectListItem>
    {
        new SelectListItem { Value = "", Text = "Any Rating" },
        new SelectListItem { Value = "4.5", Text = "4.5+ Stars" },
        new SelectListItem { Value = "4", Text = "4+ Stars" },
        new SelectListItem { Value = "3", Text = "3+ Stars" },
    };

    var sortByOptions = new List<SelectListItem>
    {
        new SelectListItem { Value = "popular", Text = "Most Popular" },
        new SelectListItem { Value = "rating", Text = "Highest Rating" },
        new SelectListItem { Value = "price-low", Text = "Price: Low to High" },
        new SelectListItem { Value = "price-high", Text = "Price: High to Low" },
    };
}

<script src="https://cdn.tailwindcss.com?plugins=forms"></script>
<script src="https://unpkg.com/lucide@latest"></script>

<div class="min-h-screen bg-gray-50">
    @Html.AntiForgeryToken()
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="mb-8">
            <h1 class="text-4xl font-bold text-gray-900 mb-4">Browse Collection</h1>
            <p class="text-xl text-gray-600">Discover the perfect outfit for your special occasion</p>
        </div>

        <div class="bg-white p-6 rounded-lg shadow-sm mb-8">
            <form id="filterForm" method="get">
                <input type="hidden" name="IsFilterOpen" id="isFilterOpenInput" value="@Model.IsFilterOpen.ToString().ToLower()" />
                <input type="hidden" name="CurrentPage" id="currentPageInput" value="@Model.CurrentPage" />
                <input type="hidden" name="PageSize" id="pageSizeInput" value="@Model.PageSize" />

                <div class="flex flex-col md:flex-row items-center justify-between gap-4">
                    <div class="relative w-full md:w-auto md:flex-grow">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <i data-lucide="search" class="h-5 w-5 text-gray-400"></i>
                        </div>
                        <input type="text" name="SearchQuery" value="@Model.SearchQuery" placeholder="Search products..."
                               class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-purple-500 focus:border-purple-500" onchange="this.form.submit()" />
                    </div>

                    <div class="flex items-center gap-2 sm:gap-4 w-full md:w-auto">
                        <button type="button" id="filterBtn" class="flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg bg-white text-gray-700 hover:bg-gray-100 w-full justify-center sm:w-auto">
                            <i data-lucide="sliders-horizontal" class="h-5 w-5"></i>
                            <span>Filters</span>
                        </button>

                        <div class="flex items-center border border-gray-300 rounded-lg p-1 bg-white">
                            <input type="hidden" name="ViewMode" id="viewModeInput" value="@Model.ViewMode" />
                            <button type="button" id="gridViewBtn" class="p-1 rounded-md @(Model.ViewMode == "grid" ? "bg-purple-600 text-white" : "text-gray-500 hover:bg-gray-100")">
                                <i data-lucide="layout-grid" class="h-5 w-5"></i>
                            </button>
                            <button type="button" id="listViewBtn" class="p-1 rounded-md @(Model.ViewMode == "list" ? "bg-purple-600 text-white" : "text-gray-500 hover:bg-gray-100")">
                                <i data-lucide="list" class="h-5 w-5"></i>
                            </button>
                        </div>

                        <select name="SortBy" onchange="this.form.submit()" class="rounded-lg border-gray-300 focus:ring-purple-500 focus:border-purple-500 flex-grow">
                            @foreach (var option in sortByOptions)
                            {
                                <option value="@option.Value" selected="@(Model.SortBy == option.Value)">@option.Text</option>
                            }
                        </select>
                    </div>
                </div>

                <div id="filterPanel" class="@(Model.IsFilterOpen ? "" : "hidden") pt-6">
                    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
                        <div>
                            <label for="CategoryFilter" class="block text-sm font-medium text-gray-700 mb-1">Category</label>
                            <select id="CategoryFilter" name="CategoryFilter" onchange="this.form.submit()" class="w-full rounded-lg border-gray-300 focus:ring-purple-500 focus:border-purple-500">
                                @foreach (var option in categories)
                                {
                                    <option value="@option.Value" selected="@(Model.CategoryFilter == option.Value)">@option.Text</option>
                                }
                            </select>
                        </div>

                        <div>
                            <label for="PriceRangeFilter" class="block text-sm font-medium text-gray-700 mb-1">Price Range</label>
                            <select id="PriceRangeFilter" name="PriceRangeFilter" onchange="this.form.submit()" class="w-full rounded-lg border-gray-300 focus:ring-purple-500 focus:border-purple-500">
                                @foreach (var option in priceRanges)
                                {
                                    <option value="@option.Value" selected="@(Model.PriceRangeFilter == option.Value)">@option.Text</option>
                                }
                            </select>
                        </div>

                        <div>
                            <label for="SizeFilter" class="block text-sm font-medium text-gray-700 mb-1">Size</label>
                            <select id="SizeFilter" name="SizeFilter" onchange="this.form.submit()" class="w-full rounded-lg border-gray-300 focus:ring-purple-500 focus:border-purple-500">
                                @foreach (var option in sizes)
                                {
                                    <option value="@option.Value" selected="@(Model.SizeFilter == option.Value)">@option.Text</option>
                                }
                            </select>
                        </div>

                        <div>
                            <label for="RatingFilter" class="block text-sm font-medium text-gray-700 mb-1">Rating</label>
                            <select id="RatingFilter" name="RatingFilter" onchange="this.form.submit()" class="w-full rounded-lg border-gray-300 focus:ring-purple-500 focus:border-purple-500">
                                @foreach (var option in ratings)
                                {
                                    <option value="@option.Value" selected="@(Model.RatingFilter == option.Value)">@option.Text</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>
            </form>
        </div>

        <div class="mb-6">
            <p class="text-gray-600">
                Showing @(Model.Products?.Count ?? 0) of @Model.TotalProductsCount products
            </p>
        </div>

        @if (Model.Products != null && Model.Products.Any())
        {
            <div class="@(Model.ViewMode == "grid" ? "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6" : "space-y-6")" id="productList">
                @foreach (var product in Model.Products)
                {
                    <div class="bg-white rounded-xl shadow-lg hover:shadow-xl transition-shadow duration-300 overflow-hidden flex flex-col">
                        <div class="relative">
                            <a href="/products/detail/@product.Id">
                                <img src="@(product.PrimaryImagesUrl ?? "https://via.placeholder.com/400x600.png?text=No+Image")" alt="@product.Name" class="object-cover w-full h-80 hover:scale-105 transition-transform duration-300" />
                            </a>
                            <form method="post" action="/products?handler=AddFavorite" class="favorite-form" data-product-id="@product.Id">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="productId" value="@product.Id" />
                                <button type="submit" class="absolute top-4 right-4 p-2 bg-white/80 rounded-full hover:bg-white transition-colors favorite-btn" data-product-id="@product.Id">
                                    <i data-lucide="heart" class="h-5 w-5 text-gray-600 hover:text-red-500 favorite-icon" data-initial-color="gray-600"></i>
                                </button>
                            </form>
                        </div>
                        <div class="p-4 flex flex-col flex-grow">
                            <a href="/products/detail/@product.Id" class="flex-grow">
                                <h3 class="text-lg font-semibold text-gray-900 mb-2 hover:text-purple-600 transition-colors">
                                    @product.Name
                                </h3>
                            </a>
                            <div class="flex items-center justify-between mb-3 mt-auto">
                                <span class="text-xl font-bold text-purple-600">@product.PricePerDay.ToString("C0")/day</span>
                                <div class="flex items-center gap-1">
                                    <i data-lucide="star" class="h-4 w-4 text-yellow-400 fill-yellow-400"></i>
                                    <span class="font-medium text-gray-700">@product.AverageRating.ToString("F1")</span>
                                </div>
                            </div>
                            <div class="flex items-center justify-between text-sm text-gray-500">
                                <span>Rented @product.RentCount times</span>
                                <span class="capitalize">@product.Category</span>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <div class="mt-8 flex justify-center items-center gap-4">
                <form method="get" id="paginationForm" class="flex items-center gap-2">
                    <input type="hidden" name="SearchQuery" value="@Model.SearchQuery" />
                    <input type="hidden" name="SortBy" value="@Model.SortBy" />
                    <input type="hidden" name="ViewMode" value="@Model.ViewMode" />
                    <input type="hidden" name="CategoryFilter" value="@Model.CategoryFilter" />
                    <input type="hidden" name="PriceRangeFilter" value="@Model.PriceRangeFilter" />
                    <input type="hidden" name="SizeFilter" value="@Model.SizeFilter" />
                    <input type="hidden" name="RatingFilter" value="@Model.RatingFilter" />
                    <input type="hidden" name="IsFilterOpen" value="@Model.IsFilterOpen.ToString().ToLower()" />
                    <input type="hidden" name="PageSize" value="@Model.PageSize" />
                    <input type="hidden" name="CurrentPage" id="paginationPageInput" value="@Model.CurrentPage" />

                    <button type="submit" onclick="ShareItFE.Pages.Products.ProductsModel.setPage(@(Model.CurrentPage - 1))"
                            class="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed"
                            disabled="@(Model.CurrentPage <= 1)">
                        Previous
                    </button>

                    @for (int i = 1; i <= Model.TotalPages; i++)
                    {
                        <button type="submit" onclick="ShareItFE.Pages.Products.ProductsModel.setPage(@i)"
                                class="px-4 py-2 rounded-lg @(i == Model.CurrentPage ? "bg-purple-600 text-white" : "bg-gray-100 text-gray-700")">
                            @i
                        </button>
                    }

                    <button type="submit" onclick="ShareItFE.Pages.Products.ProductsModel.setPage(@(Model.CurrentPage + 1))"
                            class="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed"
                            disabled="@(Model.CurrentPage >= Model.TotalPages)">
                        Next
                    </button>
                </form>
            </div>
        }
        else
        {
            <div class="text-center py-12">
                <i data-lucide="search-x" class="mx-auto h-12 w-12 text-gray-400"></i>
                <h3 class="mt-2 text-sm font-medium text-gray-900">No products found</h3>
                <p class="mt-1 text-sm text-gray-500">No products were found matching your criteria.</p>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        lucide.createIcons();

        document.addEventListener('DOMContentLoaded', () => {
        @if (TempData["SuccessMessage"] != null)
        {
            <text>
                    alert('Added to favorites successfully');
                const productId = '@TempData["LastAddedProductId"]';
                if (productId) {
                    const heartIcon = document.querySelector(`.favorite-form[data-product-id="${productId}"] .favorite-icon`);
                    if (heartIcon) {
                        heartIcon.classList.remove('text-gray-600', 'hover:text-red-500');
                        heartIcon.classList.add('text-red-500', 'fill-red-500');
                    }
                }
            </text>
        }
        @if (TempData["ErrorMessage"] != null)
        {
            <text>
                    alert('@TempData["ErrorMessage"]');
            </text>
        }

                // Kiểm tra trạng thái yêu thích từ model khi load trang
        @if (Model.FavoriteProductIds != null && Model.FavoriteProductIds.Any())
        {
            <text>
                                            const favoriteIds = @Html.Raw(Json.Serialize(Model.FavoriteProductIds));
                favoriteIds.forEach(id => {
                    const heartIcon = document.querySelector(`.favorite-form[data-product-id="${id}"] .favorite-icon`);
                    if (heartIcon) {
                        heartIcon.classList.remove('text-gray-600', 'hover:text-red-500');
                        heartIcon.classList.add('text-red-500', 'fill-red-500');
                    }
                });
            </text>
        }
                        });

        document.querySelectorAll('.favorite-form').forEach(form => {
            form.addEventListener('submit', (e) => {
                e.preventDefault();
                const productId = form.querySelector('input[name="productId"]').value;
                console.log('Submitting form for productId:', productId);
                if (productId) {
                    form.submit();
                } else {
                    console.error('productId is invalid or missing:', productId);
                }
            });
        });

        const filterBtn = document.getElementById('filterBtn');
        const isFilterOpenInput = document.getElementById('isFilterOpenInput');
        const form = document.getElementById('filterForm');

        if (filterBtn && isFilterOpenInput && form) {
            filterBtn.addEventListener('click', () => {
                const currentState = isFilterOpenInput.value === 'true';
                const newState = !currentState;
                isFilterOpenInput.value = newState.toString();
                form.submit();
            });
        }

        const viewModeInput = document.getElementById('viewModeInput');
        const gridViewBtn = document.getElementById('gridViewBtn');
        const listViewBtn = document.getElementById('listViewBtn');

        if (gridViewBtn && viewModeInput && form) {
            gridViewBtn.addEventListener('click', () => {
                if (viewModeInput.value !== 'grid') {
                    viewModeInput.value = 'grid';
                    form.submit();
                }
            });
        }

        if (listViewBtn && viewModeInput && form) {
            listViewBtn.addEventListener('click', () => {
                if (viewModeInput.value !== 'list') {
                    viewModeInput.value = 'list';
                    form.submit();
                }
            });
        }

        window.ShareItFE = window.ShareItFE || {};
        window.ShareItFE.Pages = window.ShareItFE.Pages || {};
        window.ShareItFE.Pages.Products = window.ShareItFE.Pages.Products || {};
        window.ShareItFE.Pages.Products.ProductsModel = {
            setPage: function (page) {
                document.getElementById('paginationPageInput').value = page;
                document.getElementById('paginationForm').submit();
            }
        };
    </script>
}