@page "/products/detail/{id:guid}"
@model ShareItFE.Pages.Products.DetailModel
@{
    ViewData["Title"] = Model.Product?.Name ?? "Product Detail";
}

@using System.Text.Json
<script src="https://cdn.tailwindcss.com?plugins=forms"></script>
<script src="https://unpkg.com/lucide@latest"></script>

<div class="min-h-screen bg-white">
    @if (Model.Product != null)
    {
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <a href="/products" class="flex items-center space-x-2 text-gray-600 hover:text-purple-600 transition-colors mb-8">
                <i data-lucide="arrow-left" class="h-5 w-5"></i>
                <span>Back to Products</span>
            </a>

            <div class="grid grid-cols-1 lg:grid-cols-2 gap-12">
                <div class="space-y-4">
                    <div class="aspect-w-3 aspect-h-4 bg-gray-100 rounded-lg overflow-hidden">
                        <img id="mainProductImage" src="@(Model.Product.Images?.FirstOrDefault()?.ImageUrl ?? "https://via.placeholder.com/600x800.png?text=No+Image")" alt="@Model.Product.Name" class="w-full h-96 lg:h-[600px] object-cover" />
                    </div>
                    <div class="flex space-x-4">
                        @if (Model.Product.Images != null)
                        {
                            @for (int i = 0; i < Model.Product.Images.Count; i++)
                            {
                                var image = Model.Product.Images[i];
                                <button type="button" class="thumbnail-btn w-20 h-20 rounded-lg overflow-hidden border-2 @(i == 0 ? "border-purple-600" : "border-gray-200")" data-image-src="@image.ImageUrl">
                                    <img src="@image.ImageUrl" alt="@($"{Model.Product.Name} {i + 1}")" class="w-full h-full object-cover" />
                                </button>
                            }
                        }
                    </div>
                </div>

                <div class="space-y-6">
                    <!-- Di chuyển favorite và share ra ngoài form addToCartForm -->
                    <div class="flex items-center justify-between mb-2">
                        <div class="flex-grow"></div>
                        <div class="flex items-center space-x-2">
                            <form method="post" action="/products/detail/@Model.Product.Id?handler=AddFavorite" class="favorite-form" data-product-id="@Model.Product.Id">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="productId" value="@Model.Product.Id" />
                                <button type="submit" class="p-2 text-gray-400 hover:text-red-500 transition-colors favorite-btn" data-product-id="@Model.Product.Id">
                                    <i data-lucide="heart" class="h-5 w-5 favorite-icon @(Model.IsFavorite ? "text-red-500 fill-red-500" : "text-gray-400 hover:text-red-500")"></i>
                                </button>
                            </form>
                            <button type="button" class="p-2 text-gray-400 hover:text-gray-600 transition-colors"><i data-lucide="share-2" class="h-5 w-5"></i></button>
                        </div>
                    </div>

                    <form method="post" id="addToCartForm" asp-page-handler="AddToCart" asp-route-id="@Model.Product.Id">
                        <div>
                            <div class="flex items-center justify-between mb-4">
                                <h1 class="text-3xl font-bold text-gray-900">@Model.Product.Name</h1>
                                <button type="button" id="tryOnBtn" class="flex items-center space-x-2 bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors">
                                    <i data-lucide="sparkles" class="h-4 w-4"></i>
                                    <span>Try On</span>
                                </button>
                            </div>
                            <div class="flex items-center space-x-4 mb-4">
                                <div class="flex items-center space-x-1">
                                    <div class="flex">
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            <i data-lucide="star" class="h-5 w-5 @(i <= Model.Product.AverageRating ? "fill-yellow-400 text-yellow-400" : "text-gray-300")"></i>
                                        }
                                    </div>
                                    <span class="text-sm text-gray-600">
                                        @Model.Product.AverageRating.ToString("F1") (@(Model.Feedbacks?.Count ?? 0) reviews)
                                    </span>
                                </div>
                                <span class="text-sm text-gray-500">Rented @Model.Product.RentCount times</span>
                            </div>
                            <div class="text-3xl font-bold text-purple-600 mb-6">@Model.Product.PricePerDay.ToString("C0")/day</div>
                        </div>

                        <div class="bg-gray-50 rounded-lg p-4">
                            <div class="flex items-center justify-between">
                                <div>
                                    <h4 class="font-medium text-gray-900">Provided by</h4>
                                    <p class="text-purple-600 font-semibold">@Model.Product.ProviderName</p>
                                </div>
                                <button type="button" id="openChatBtn" class="flex items-center space-x-2 bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors">
                                    <i data-lucide="message-circle" class="h-4 w-4"></i>
                                    <span>Message</span>
                                </button>
                            </div>
                        </div>

                        <div class="space-y-4">
                            <div>
                                <h3 class="text-lg font-semibold text-gray-900 mb-2">Description</h3>
                                <p class="text-gray-600 leading-relaxed">@Model.Product.Description</p>
                            </div>
                            <div class="grid grid-cols-2 gap-4 text-sm">
                                <div><span class="font-medium text-gray-900">Color:</span><span class="ml-2 text-gray-600">@Model.Product.Color</span></div>
                                <div><span class="font-medium text-gray-900">Category:</span><span class="ml-2 text-gray-600 capitalize">@Model.Product.Category</span></div>
                            </div>
                        </div>

                        <div class="border-t pt-6 space-y-6">
                            <div>
                                <label class="block text-sm font-medium text-gray-900 mb-3">Select Size</label>
                                <div asp-validation-for="SelectedSize" class="text-red-500 text-sm mb-2"></div>
                                <input type="hidden" id="selectedSizeInput" asp-for="SelectedSize" />
                                <div class="flex space-x-3">
                                    @foreach (var size in (Model.Product.Size?.Split(',') ?? Enumerable.Empty<string>()))
                                    {
                                        <button type="button" class="size-btn px-4 py-2 border rounded-lg font-medium transition-colors border-gray-300 text-gray-700 hover:border-purple-600" data-size="@size.Trim()">@size.Trim()</button>
                                    }
                                </div>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-900 mb-3">Rental Period</label>
                                <input type="hidden" id="rentalDaysInput" asp-for="RentalDays" />
                                <div class="flex items-center space-x-4">
                                    <button type="button" id="decreaseDaysBtn" class="p-2 border border-gray-300 rounded-lg hover:bg-gray-50"><i data-lucide="minus" class="h-4 w-4"></i></button>
                                    <span id="rentalDaysDisplay" class="text-lg font-semibold min-w-[5rem] text-center">@Model.RentalDays days</span>
                                    <button type="button" id="increaseDaysBtn" class="p-2 border border-gray-300 rounded-lg hover:bg-gray-50"><i data-lucide="plus" class="h-4 w-4"></i></button>
                                </div>
                            </div>
                            <div>
                                <label asp-for="StartDate" class="block text-sm font-medium text-gray-900 mb-3">Start Date</label>
                                <div asp-validation-for="StartDate" class="text-red-500 text-sm mb-2"></div>
                                <input type="date" asp-for="StartDate" min="@DateTime.Now.ToString("yyyy-MM-dd")" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent" />
                            </div>
                            <div class="bg-gray-50 rounded-lg p-4">
                                <div class="flex justify-between items-center mb-2">
                                    <span class="text-gray-600">Rental (<span id="totalDaysDisplay">@Model.RentalDays</span> days)</span>
                                    <span id="pricePerPeriod" class="font-semibold"></span>
                                </div>
                                <div class="flex justify-between items-center text-lg font-bold">
                                    <span>Total</span>
                                    <span id="totalPrice" class="text-purple-600"></span>
                                </div>
                            </div>
                            <button type="submit"
                                    disabled="@(!string.Equals(Model.Product.AvailabilityStatus, "Available", StringComparison.OrdinalIgnoreCase))"
                                    class="w-full bg-purple-600 text-white py-3 px-6 rounded-lg font-semibold hover:bg-purple-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors">
                                @(string.Equals(Model.Product.AvailabilityStatus, "Available", StringComparison.OrdinalIgnoreCase) ? "Add to Cart" : "Not Available")
                            </button>
                          
                            <div class="grid grid-cols-3 gap-4 pt-6 border-t">
                                <div class="text-center"><i data-lucide="truck" class="h-8 w-8 text-purple-600 mx-auto mb-2"></i><div class="text-sm font-medium text-gray-900">Free Delivery</div><div class="text-xs text-gray-500">Both ways</div></div>
                                <div class="text-center"><i data-lucide="calendar" class="h-8 w-8 text-purple-600 mx-auto mb-2"></i><div class="text-sm font-medium text-gray-900">Flexible Dates</div><div class="text-xs text-gray-500">Easy rescheduling</div></div>
                                <div class="text-center"><i data-lucide="shield" class="h-8 w-8 text-purple-600 mx-auto mb-2"></i><div class="text-sm font-medium text-gray-900">Damage Protection</div><div class="text-xs text-gray-500">Worry-free rental</div></div>
                            </div>
                        </div>
                    </form>

                    @if (@Model.CanBeFeedbacked)
                    {
                        <button id="openFeedbackBtn" class="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors flex items-center space-x-2">
                            <i data-lucide="message-square-plus" class="h-4 w-4"></i>
                            <span>Leave Feedback</span>
                        </button>
                    }
                </div>
            </div>

            @if (Model.Feedbacks != null && Model.Feedbacks.Any())
            {
                <div class="mt-16 border-t pt-16">
                    <div class="flex items-center justify-between mb-8">
                        <h2 class="text-2xl font-bold text-gray-900">Customer Reviews</h2>
                        <div class="flex items-center space-x-2">
                            <div class="flex">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    <i data-lucide="star" class="h-5 w-5 @(i <= Model.Product.AverageRating ? "fill-yellow-400 text-yellow-400" : "text-gray-300")"></i>
                                }
                            </div>
                            <span class="text-lg font-semibold">@Model.Product.AverageRating.ToString("F1")</span>
                            <span class="text-gray-500">(@(Model.Feedbacks?.Count ?? 0) reviews)</span>
                        </div>
                    </div>

                    <div class="space-y-6">
                        @foreach (var feedback in Model.Feedbacks)
                        {
                            <div class="bg-gray-50 rounded-lg p-6">
                                <div class="flex items-center justify-between mb-4">
                                    <div class="flex items-center space-x-3">
                                        <img src="@feedback.ProfilePictureUrl" alt="@feedback.UserName's avatar" class="w-10 h-10 rounded-full object-cover" />
                                        <div>
                                            <div class="flex items-center space-x-2"><span class="font-semibold text-gray-900">@feedback.UserName</span></div>
                                            <div class="flex items-center space-x-2">
                                                <div class="flex">
                                                    @for (int i = 1; i <= 5; i++)
                                                    {
                                                        <i data-lucide="star" class="h-4 w-4 @(i <= feedback.Rating ? "fill-yellow-400 text-yellow-400" : "text-gray-300")"></i>
                                                    }
                                                </div>
                                                <span class="text-sm text-gray-500">@feedback.CreatedAt.ToLocalTime().ToString("dd MMM, yyyy")</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <p class="text-gray-700">@feedback.Comment</p>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-center py-20">
            <h2 class="text-2xl font-bold">Product not found.</h2>
            <p class="text-gray-600">The product you are looking for does not exist.</p>
            <a href="/products" class="mt-4 inline-block text-purple-600 hover:underline">Return to collection</a>
        </div>
    }
</div>

<div id="chatModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
    <div class="relative top-20 mx-auto p-5 border w-full max-w-lg shadow-lg rounded-md bg-white">
        <div class="flex justify-between items-center pb-3 border-b">
            <p id="chat-provider-name" class="text-2xl font-bold">Chat with Provider</p>
            <button id="closeChatBtn" class="cursor-pointer z-50">
                <i data-lucide="x" class="h-6 w-6"></i>
            </button>
        </div>
        <div class="mt-3">
            <div id="chat-messages" class="h-96 overflow-y-auto p-3 space-y-4 bg-gray-50 rounded-lg">
                <div class="text-center text-gray-400">Loading messages...</div>
            </div>
            <form id="sendMessageForm" class="mt-4 flex space-x-3">
                <input type="text" id="chat-message-input" placeholder="Type a message..." autocomplete="off"
                       class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent" disabled>
                <button type="submit" id="chat-send-btn"
                        class="bg-purple-600 text-white px-6 py-2 rounded-lg hover:bg-purple-700 disabled:bg-gray-400 transition-colors" disabled>
                    Send
                </button>
            </form>
        </div>
    </div>
</div>
<div id="feedbackModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
    <div class="relative top-20 mx-auto p-5 border w-full max-w-md shadow-lg rounded-md bg-white">
        <div class="flex justify-between items-center pb-3 border-b">
            <p class="text-2xl font-bold">Submit Your Feedback</p>
            <button id="closeFeedbackBtn" class="cursor-pointer z-50">
                <i data-lucide="x" class="h-6 w-6"></i>
            </button>
        </div>
        <form method="post" asp-page-handler="AddFeedback" asp-route-id="@Model.Product.Id" class="mt-4 space-y-4">
            @Html.AntiForgeryToken()
            <input type="hidden" name="productId" value="@Model.Product.Id" />
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Your Rating</label>
                <div class="flex space-x-1" id="starRatingContainer">
                    @for (int i = 1; i <= 5; i++)
                    {
                        <button type="button" class="feedback-star-btn text-gray-300 hover:text-yellow-400" data-rating="@i">
                            <i data-lucide="star" class="h-8 w-8"></i>
                        </button>
                    }
                </div>
                <input type="hidden" id="feedbackRatingInput" asp-for="FeedbackInput.Rating" value="0" />
                <span asp-validation-for="FeedbackInput.Rating" class="text-red-500 text-sm"></span>
            </div>

            <div>
                <label for="feedbackComment" class="block text-sm font-medium text-gray-700 mb-2">Your Comment</label>
                <textarea id="feedbackComment" asp-for="FeedbackInput.Comment" rows="4"
                          class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-purple-500 focus:border-purple-500"
                          placeholder="Share your thoughts about this product..."></textarea>
                <span asp-validation-for="FeedbackInput.Comment" class="text-red-500 text-sm"></span>
            </div>

            <div class="flex justify-end space-x-3">
                <button type="button" id="cancelFeedbackBtn" class="px-4 py-2 text-gray-700 bg-gray-200 rounded-md hover:bg-gray-300 transition-colors">Cancel</button>
                <button type="submit" class="px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 transition-colors">Submit Feedback</button>
            </div>
        </form>
    </div>
</div>
@section Scripts {
    <script src="~/js/dist/browser/signalr.js"></script>
    <script>
        lucide.createIcons();

        document.addEventListener('DOMContentLoaded', function () {

                    // --- PHẦN 3: LOGIC CHO FEEDBACK MODAL ---

            // DOM Elements for Feedback Modal
            const openFeedbackBtn = document.getElementById('openFeedbackBtn');
            const closeFeedbackBtn = document.getElementById('closeFeedbackBtn');
            const cancelFeedbackBtn = document.getElementById('cancelFeedbackBtn');
            const feedbackModal = document.getElementById('feedbackModal');
            const starRatingContainer = document.getElementById('starRatingContainer');
            const feedbackRatingInput = document.getElementById('feedbackRatingInput');
            const feedbackCommentInput = document.getElementById('feedbackComment'); // Corrected ID

            if (openFeedbackBtn) {
                openFeedbackBtn.addEventListener('click', () => {
                    feedbackModal.classList.remove('hidden');
                    document.body.classList.add('overflow-hidden');
                    // Reset form fields when opening
                    feedbackRatingInput.value = '0';
                    feedbackCommentInput.value = '';
                    updateStarRating(0); // Set initial stars to none
                });
            }

            if (closeFeedbackBtn) {
                closeFeedbackBtn.addEventListener('click', () => {
                    feedbackModal.classList.add('hidden');
                    document.body.classList.remove('overflow-hidden');
                });
            }

            if (cancelFeedbackBtn) {
                cancelFeedbackBtn.addEventListener('click', () => {
                    feedbackModal.classList.add('hidden');
                    document.body.classList.remove('overflow-hidden');
                });
            }

                    // ... (keep your existing DOM element references and open/close modal logic) ...

                // ... (Your existing DOM elements and modal open/close logic) ...

            // Star Rating Logic
            function updateStarRating(rating) {
                const starButtons = starRatingContainer.querySelectorAll('.feedback-star-btn');
                starButtons.forEach((button, index) => {
                    // Find the SVG element within the button
                    const svgIcon = button.querySelector('svg[data-lucide="star"]');

                    if (svgIcon) {
                        // Option A: Manipulate fill directly on the SVG path (most robust for fill color)
                        const pathElement = svgIcon.querySelector('path');
                        if (pathElement) {
                            if (index < rating) {
                                pathElement.setAttribute('fill', '#FACC15'); // Tailwind yellow-400
                                svgIcon.setAttribute('stroke', '#FACC15'); // Tailwind yellow-400 (for stroke, if applicable)
                            } else {
                                pathElement.setAttribute('fill', 'none'); // No fill for empty star
                                svgIcon.setAttribute('stroke', '#D1D5DB'); // Tailwind gray-300 (for stroke)
                            }
                        }

                        // Option B: (Less reliable, but can try if A causes issues with complex SVGs)
                        // Re-create the icon on the button after changing classes
                        // This requires calling lucide.createIcons() on a specific element
                        //
                        // First, remove existing classes
                        // button.classList.remove('text-gray-300', 'text-yellow-400', 'fill-yellow-400');
                        //
                        // if (index < rating) {
                        //     button.classList.add('text-yellow-400'); // Add text class for stroke
                        //     // Note: Tailwind fill- classes typically target SVGs directly,
                        //     // but Lucide might need a recreation if its internal rendering
                        //     // isn't reacting to parent class changes.
                        // } else {
                        //     button.classList.add('text-gray-300'); // Add text class for stroke
                        // }
                        // lucide.createIcons({ attrs: { class: 'h-8 w-8' }, element: button }); // Re-create just this icon
                    }
                });
                feedbackRatingInput.value = rating;
            }

            starRatingContainer.addEventListener('click', (event) => {
                const clickedButton = event.target.closest('.feedback-star-btn');
                if (clickedButton) {
                    const rating = parseInt(clickedButton.dataset.rating, 10);
                    updateStarRating(rating);
                }
            });

            // IMPORTANT: Call updateStarRating(0) on modal open to ensure stars are reset
            if (openFeedbackBtn) {
                openFeedbackBtn.addEventListener('click', () => {
                    feedbackModal.classList.remove('hidden');
                    document.body.classList.add('overflow-hidden');
                    feedbackRatingInput.value = '0';
                    feedbackCommentInput.value = '';
                    updateStarRating(0); // This line is crucial for resetting on open
                });
            }

                // Chỉ thực thi JavaScript nếu Model.Product tồn tại
        @if (Model.Product != null)
        {
            <text>
                                // --- PHẦN 1: LOGIC CHO TRANG SẢN PHẨM ---

                                // Image gallery logic
                                const mainImage = document.getElementById('mainProductImage');
                const thumbnailBtns = document.querySelectorAll('.thumbnail-btn');
                thumbnailBtns.forEach(btn => {
                    btn.addEventListener('click', () => {
                        mainImage.src = btn.dataset.imageSrc;
                        thumbnailBtns.forEach(b => b.classList.remove('border-purple-600', 'border-gray-200'));
                        btn.classList.add('border-purple-600');
                    });
                });

                // Size selection logic
                const sizeBtns = document.querySelectorAll('.size-btn');
                const selectedSizeInput = document.getElementById('selectedSizeInput');
                sizeBtns.forEach(btn => {
                    btn.addEventListener('click', () => {
                        selectedSizeInput.value = btn.dataset.size;
                        sizeBtns.forEach(b => {
                            b.classList.remove('bg-purple-600', 'text-white', 'border-purple-600');
                        });
                        btn.classList.add('bg-purple-600', 'text-white', 'border-purple-600');
                    });
                });

                // Rental days and price logic
                const decreaseBtn = document.getElementById('decreaseDaysBtn');
                const increaseBtn = document.getElementById('increaseDaysBtn');
                const daysDisplay = document.getElementById('rentalDaysDisplay');
                const daysInput = document.getElementById('rentalDaysInput');
                const pricePerDay = @Model.Product.PricePerDay.ToString(System.Globalization.CultureInfo.InvariantCulture);
                const pricePerPeriodEl = document.getElementById('pricePerPeriod');
                const totalDaysDisplayEl = document.getElementById('totalDaysDisplay');
                const totalPriceEl = document.getElementById('totalPrice');

                function formatCurrency(amount) {
                    return amount.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' });
                }

                function updatePrice() {
                    let currentDays = parseInt(daysInput.value, 10);
                    daysDisplay.textContent = `${currentDays} ${currentDays === 1 ? 'day' : 'days'}`;
                    const total = currentDays * pricePerDay;
                    pricePerPeriodEl.textContent = formatCurrency(total);
                    totalPriceEl.textContent = formatCurrency(total);
                    totalDaysDisplayEl.textContent = currentDays;
                }

                decreaseBtn.addEventListener('click', () => {
                    let currentDays = parseInt(daysInput.value, 10);
                    if (currentDays > 1) {
                        daysInput.value = currentDays - 1;
                        updatePrice();
                    }
                });

                increaseBtn.addEventListener('click', () => {
                    let currentDays = parseInt(daysInput.value, 10);
                    daysInput.value = currentDays + 1;
                    updatePrice();
                });

                updatePrice(); // Initial price calculation

                // Form validation
                const addToCartForm = document.getElementById('addToCartForm');
                if (addToCartForm) {
                    addToCartForm.addEventListener('submit', function (event) {
                        const sizeValue = document.getElementById('selectedSizeInput').value;
                        const dateValue = document.querySelector('input[name="StartDate"]').value;

                        if (!sizeValue) {
                            event.preventDefault();
                            alert('Please select a size');
                            return;
                        }
                        if (!dateValue) {
                            event.preventDefault();
                            alert('Please select a start date');
                            return;
                        }
                    });
                }

                // Favorite button logic
                const favoriteForm = document.querySelector('.favorite-form');
                if (favoriteForm) {
                    favoriteForm.addEventListener('submit', (e) => {
                        e.preventDefault();
                        const productId = favoriteForm.querySelector('input[name="productId"]').value;
                        if (productId) {
                            favoriteForm.submit();
                        }
                    });
                }

                // Try On button logic
                const tryOnBtn = document.getElementById('tryOnBtn');
                if (tryOnBtn) {
                    tryOnBtn.addEventListener('click', () => {
                        const garmentImageUrls = @Html.Raw(JsonSerializer.Serialize(Model.Product.Images?.Select(i => i.ImageUrl).ToList() ?? new List<string>()));
                        if (garmentImageUrls.length > 0) {
                            window.location.href = `/AI/AIGeneration?GarmentImageUrls=${encodeURIComponent(JSON.stringify(garmentImageUrls))}`;
                        } else {
                            alert('No garment image available for try-on');
                        }
                    });
                }

                // --- PHẦN 2: LOGIC CHO CHAT MODAL ---

                // DOM Elements
                const openChatBtn = document.getElementById('openChatBtn');
                const closeChatBtn = document.getElementById('closeChatBtn');
                const chatModal = document.getElementById('chatModal');
                const messagesContainer = document.getElementById('chat-messages');
                const messageForm = document.getElementById('sendMessageForm');
                const messageInput = document.getElementById('chat-message-input');
                const sendBtn = document.getElementById('chat-send-btn');
                const providerNameEl = document.getElementById('chat-provider-name');

                // Data from Model
                const providerId = '@Model.Product.ProviderId';
                const currentUserId = '@Model.CurrentUserId';
                const productId = '@Model.Product.Id';
                const apiUrl = '@Model.ApiBaseUrl';
                const signalRUrl = '@Model.SignalRRootUrl';
                const accessToken = '@Model.AccessToken';

                // State variables
                let signalRConnection = null;
                let currentConversationId = null;
                let currentPage = 1;
                const pageSize = 15;
                let isLoadingMessages = false;
                let allMessagesLoaded = false;

                // Helper Functions
                function createMessageElement(message, isMe) {
                    const messageDiv = document.createElement('div');
                    messageDiv.classList.add('flex', 'mb-2', isMe ? 'justify-end' : 'justify-start');
                    const bubbleDiv = document.createElement('div');
                    bubbleDiv.classList.add('px-4', 'py-2', 'rounded-lg', 'max-w-xs', 'break-words', isMe ? 'bg-purple-600' : 'bg-gray-200', isMe ? 'text-white' : 'text-gray-800');
                    bubbleDiv.textContent = message.content;
                    messageDiv.appendChild(bubbleDiv);
                    return messageDiv;
                }

                function appendNewMessage(message) {
                    const isMe = message.senderId.toLowerCase() === currentUserId.toLowerCase();
                    const el = createMessageElement(message, isMe);
                    messagesContainer.appendChild(el);
                    messagesContainer.scrollTop = messagesContainer.scrollHeight;
                }

                function prependOldMessage(message) {
                    const isMe = message.senderId.toLowerCase() === currentUserId.toLowerCase();
                    const el = createMessageElement(message, isMe);
                    messagesContainer.prepend(el);
                }

                // Main Logic Functions
                async function loadMessageHistory() {
                    if (isLoadingMessages || allMessagesLoaded || !currentConversationId) return;
                    isLoadingMessages = true;

                    try {
                        const response = await fetch(`${apiUrl}/conversations/${currentConversationId}/messages?page=${currentPage}&pageSize=${pageSize}`, {
                            headers: { 'Authorization': 'Bearer ' + accessToken }
                        });
                        if (!response.ok) throw new Error('Failed to load messages.');

                        const messages = await response.json();
                        const oldScrollHeight = messagesContainer.scrollHeight;

                        if (messages.length > 0) {
                            messages.reverse().forEach(prependOldMessage);
                            messagesContainer.scrollTop = messagesContainer.scrollHeight - oldScrollHeight;
                            currentPage++;
                        } else {
                            allMessagesLoaded = true;
                        }
                    } catch (error) {
                        console.error(error);
                    } finally {
                        isLoadingMessages = false;
                    }
                }

                async function setupSignalRConnection() {
                    if (signalRConnection) await signalRConnection.stop();

                    signalRConnection = new signalR.HubConnectionBuilder()
                        .withUrl(`${signalRUrl}/chathub?access_token=${accessToken}`)
                        .withAutomaticReconnect().build();

                    signalRConnection.on("ReceiveMessage", (message) => {
                        if (message.conversationId.toLowerCase() === currentConversationId.toLowerCase()) {
                            const isMe = message.senderId.toLowerCase() === currentUserId.toLowerCase();
                            if (!isMe) {
                                appendNewMessage(message);
                            }
                        }
                    });

                    await signalRConnection.start();
                    messageInput.disabled = false;
                    sendBtn.disabled = false;
                }

                async function initializeChat() {
                    currentPage = 1;
                    isLoadingMessages = false;
                    allMessagesLoaded = false;
                    messagesContainer.innerHTML = '<div class="text-center text-gray-400">Initializing...</div>';

                    try {
                        const response = await fetch(`${apiUrl}/conversations/find-or-create`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json', 'Authorization': 'Bearer ' + accessToken },
                            body: JSON.stringify({ recipientId: providerId })
                        });

                        if (!response.ok) throw new Error(`Failed to start conversation. Status: ${response.status}`);

                        const conversation = await response.json();
                        currentConversationId = conversation.id;
                        providerNameEl.textContent = `Chat with ${conversation.otherParticipant.fullName}`;

                        messagesContainer.innerHTML = '';
                        await setupSignalRConnection();
                        await loadMessageHistory();
                    } catch (error) {
                        console.error(error);
                        messagesContainer.innerHTML = `<div class="text-center text-red-500">${error.message}</div>`;
                    }
                }

                // Event Listeners
                if (openChatBtn) {
                    openChatBtn.addEventListener('click', (e) => {
                        e.preventDefault();
                        if (!accessToken) {
                            alert("Please log in to chat.");
                            return;
                        }
                        chatModal.classList.remove('hidden');
                        document.body.classList.add('overflow-hidden');
                        initializeChat();
                    });
                }

                if (closeChatBtn) {
                    closeChatBtn.addEventListener('click', () => {
                        chatModal.classList.add('hidden');
                        document.body.classList.remove('overflow-hidden');
                        if (signalRConnection) {
                            signalRConnection.stop().then(() => signalRConnection = null);
                        }
                    });
                }

                messageForm.addEventListener('submit', (e) => {
                    e.preventDefault();
                    const messageContent = messageInput.value.trim();
                    if (messageContent && signalRConnection && currentConversationId) {
                        const tempMessage = { content: messageContent, senderId: currentUserId };
                        appendNewMessage(tempMessage);

                        signalRConnection.invoke("SendMessageAsync", currentConversationId, providerId, messageContent, productId)
                            .catch(err => {
                                console.error("Failed to send message:", err);
                                alert("Could not send message. Please try again.");
                            });
                        messageInput.value = '';
                    }
                });

                messagesContainer.addEventListener('scroll', () => {
                    if (messagesContainer.scrollTop === 0 && currentConversationId) {
                        loadMessageHistory();
                    }
                });
            </text>
        }
                });
    </script>
}

